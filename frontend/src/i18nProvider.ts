//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';
import grOriginal from 'ra-language-greek';

const enResources = {
  resources: {
    User: {
      name: 'User',
      fields: {
        name: 'Name',
        email: 'Email',
        password: 'Password',
        subscriptionType: 'Subscription Type',
        profilePicture: 'Profile Picture',
        dateJoined: 'Date Joined',
        id: 'id',
      },
    },
    Musictrack: {
      name: 'Music Track',
      fields: {
        title: 'Title',
        artist: 'Artist',
        album: 'Album',
        duration: 'Duration',
        genre: 'Genre',
        fileUrl: 'File Url',
        coverImage: 'Cover Image',
        bpm: 'Bpm',
        key: 'Key',
        id: 'id',
      },
    },
    Playlist: {
      name: 'Playlist',
      fields: { name: 'Name', shareable: 'Shareable', id: 'id' },
    },
    Advertisement: {
      name: 'Advertisement',
      fields: {
        title: 'Title',
        image: 'Image',
        audioUrl: 'Audio Url',
        link: 'Link',
        sponsorId: 'Sponsor Id',
        startDate: 'Start Date',
        endDate: 'End Date',
        id: 'id',
      },
    },
    Sponsorinvestor: {
      name: 'Sponsor Investor',
      fields: {
        name: 'Name',
        logo: 'Logo',
        website: 'Website',
        contactInfo: 'Contact Info',
        description: 'Description',
        id: 'id',
      },
    },
    Editedtrack: {
      name: 'Edited Track',
      fields: {
        originalTrackId: 'Original Track Id',
        userId: 'User Id',
        editedFileUrl: 'Edited File Url',
        bpm: 'Bpm',
        key: 'Key',
        createdAt: 'Created At',
        id: 'id',
      },
    },
    Subscription: {
      name: 'Subscription',
      fields: {
        userId: 'User Id',
        startDate: 'Start Date',
        endDate: 'End Date',
        status: 'Status',
        paymentMethod: 'Payment Method',
        amount: 'Amount',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    User: {
      name: 'User (fr)',
      fields: {
        name: 'Name (fr)',
        email: 'Email (fr)',
        password: 'Password (fr)',
        subscriptionType: 'Subscription Type (fr)',
        profilePicture: 'Profile Picture (fr)',
        dateJoined: 'Date Joined (fr)',
        id: 'id',
      },
    },
    Musictrack: {
      name: 'Music Track (fr)',
      fields: {
        title: 'Title (fr)',
        artist: 'Artist (fr)',
        album: 'Album (fr)',
        duration: 'Duration (fr)',
        genre: 'Genre (fr)',
        fileUrl: 'File Url (fr)',
        coverImage: 'Cover Image (fr)',
        bpm: 'Bpm (fr)',
        key: 'Key (fr)',
        id: 'id',
      },
    },
    Playlist: {
      name: 'Playlist (fr)',
      fields: { name: 'Name (fr)', shareable: 'Shareable (fr)', id: 'id' },
    },
    Advertisement: {
      name: 'Advertisement (fr)',
      fields: {
        title: 'Title (fr)',
        image: 'Image (fr)',
        audioUrl: 'Audio Url (fr)',
        link: 'Link (fr)',
        sponsorId: 'Sponsor Id (fr)',
        startDate: 'Start Date (fr)',
        endDate: 'End Date (fr)',
        id: 'id',
      },
    },
    Sponsorinvestor: {
      name: 'Sponsor Investor (fr)',
      fields: {
        name: 'Name (fr)',
        logo: 'Logo (fr)',
        website: 'Website (fr)',
        contactInfo: 'Contact Info (fr)',
        description: 'Description (fr)',
        id: 'id',
      },
    },
    Editedtrack: {
      name: 'Edited Track (fr)',
      fields: {
        originalTrackId: 'Original Track Id (fr)',
        userId: 'User Id (fr)',
        editedFileUrl: 'Edited File Url (fr)',
        bpm: 'Bpm (fr)',
        key: 'Key (fr)',
        createdAt: 'Created At (fr)',
        id: 'id',
      },
    },
    Subscription: {
      name: 'Subscription (fr)',
      fields: {
        userId: 'User Id (fr)',
        startDate: 'Start Date (fr)',
        endDate: 'End Date (fr)',
        status: 'Status (fr)',
        paymentMethod: 'Payment Method (fr)',
        amount: 'Amount (fr)',
        id: 'id',
      },
    },
  },
};
const grResources = {
  resources: {
    User: {
      name: 'User (gr)',
      fields: {
        name: 'Name (gr)',
        email: 'Email (gr)',
        password: 'Password (gr)',
        subscriptionType: 'Subscription Type (gr)',
        profilePicture: 'Profile Picture (gr)',
        dateJoined: 'Date Joined (gr)',
        id: 'id',
      },
    },
    Musictrack: {
      name: 'Music Track (gr)',
      fields: {
        title: 'Title (gr)',
        artist: 'Artist (gr)',
        album: 'Album (gr)',
        duration: 'Duration (gr)',
        genre: 'Genre (gr)',
        fileUrl: 'File Url (gr)',
        coverImage: 'Cover Image (gr)',
        bpm: 'Bpm (gr)',
        key: 'Key (gr)',
        id: 'id',
      },
    },
    Playlist: {
      name: 'Playlist (gr)',
      fields: { name: 'Name (gr)', shareable: 'Shareable (gr)', id: 'id' },
    },
    Advertisement: {
      name: 'Advertisement (gr)',
      fields: {
        title: 'Title (gr)',
        image: 'Image (gr)',
        audioUrl: 'Audio Url (gr)',
        link: 'Link (gr)',
        sponsorId: 'Sponsor Id (gr)',
        startDate: 'Start Date (gr)',
        endDate: 'End Date (gr)',
        id: 'id',
      },
    },
    Sponsorinvestor: {
      name: 'Sponsor Investor (gr)',
      fields: {
        name: 'Name (gr)',
        logo: 'Logo (gr)',
        website: 'Website (gr)',
        contactInfo: 'Contact Info (gr)',
        description: 'Description (gr)',
        id: 'id',
      },
    },
    Editedtrack: {
      name: 'Edited Track (gr)',
      fields: {
        originalTrackId: 'Original Track Id (gr)',
        userId: 'User Id (gr)',
        editedFileUrl: 'Edited File Url (gr)',
        bpm: 'Bpm (gr)',
        key: 'Key (gr)',
        createdAt: 'Created At (gr)',
        id: 'id',
      },
    },
    Subscription: {
      name: 'Subscription (gr)',
      fields: {
        userId: 'User Id (gr)',
        startDate: 'Start Date (gr)',
        endDate: 'End Date (gr)',
        status: 'Status (gr)',
        paymentMethod: 'Payment Method (gr)',
        amount: 'Amount (gr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);
const gr = mergeTranslations(grOriginal, grResources);

const translations = { en, fr, gr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Français' },
    { locale: 'gr', name: 'Ελληνικά' },
  ],
);
